package com.afsal.dev.filimapp.viewModelimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.afsal.dev.filimapp.models.CategoriesListDataimport com.afsal.dev.filimapp.models.Categoryimport com.afsal.dev.filimapp.models.MovieItemimport com.afsal.dev.filimapp.models.MoviesDataimport com.afsal.dev.filimapp.network.Resourceimport com.afsal.dev.filimapp.repository.MoviesRepositoryimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass MoviesViewModel @Inject constructor(private val repository: MoviesRepository) : ViewModel() {    private val _sortedMoviesData = MutableLiveData<ArrayList<CategoriesListData>>()    val sortedMoviesData: LiveData<ArrayList<CategoriesListData>> get() = _sortedMoviesData    private val _categoryList = MutableLiveData<Category>()    val categoryList: LiveData<Category> get() = _categoryList    private val _movieListData = MutableLiveData<MoviesData>()    val moviesListData: LiveData<MoviesData> get() = _movieListData    val selectdMovies= MutableLiveData<List<MovieItem>>()    init {        getAllData()    }    //ArrayList<CategoriesListData>    private fun sortCategories(moviesdData: MoviesData, categoryData: Category) {              Log.d("TTT","Sorting is called")        val sortedMoviesList = ArrayList<CategoriesListData>()        var moviesList = listOf<MovieItem>()        for (item in categoryData) {            moviesList = moviesdData.filter {                it.category_id == item.category_id            }            sortedMoviesList.add(                CategoriesListData(                    item.category_name,                    item.category_id,                    moviesList                )            )        }        _sortedMoviesData.postValue(sortedMoviesList)        Log.d("TTT","final list $sortedMoviesList")    }    private fun getAllData() {        var categoryResult = false        viewModelScope.launch(Dispatchers.IO) {            val result = repository.getAllCategories()            when (result) {                is Resource.Success -> {                    _categoryList.postValue(result.value.body())                    categoryResult = result.value.isSuccessful                    Log.d("TTT", "result successes ${result.value.isSuccessful}")                    Log.d("TTT", "result successes ${result.value.code()}")                    Log.d("TTT", "result successes ${result.value.body()}")                }                is Resource.Failure -> {                    Log.d("TTT", "result failure ${result.errorCode}")                    Log.d("TTT", "result failure ${result.errorBody}")                }                else -> {}            }        }        viewModelScope.launch(Dispatchers.IO) {            var movieReult = false            when (val result = repository.getMoviesList()) {                is Resource.Success -> {                    _movieListData.postValue(result.value.body())                          launch {                              Log.d("TTTT","Both responses $categoryResult  ${result.value.isSuccessful}")                              if (categoryResult ) {                                  _movieListData.value?.let {                                      categoryList.value?.let { it1 ->                                          sortCategories(                                              it,                                              it1                                          )                                      }                                  }                              }                          }                    Log.d("TTT", "result successes ${result.value.isSuccessful}")                    Log.d("TTT", "result successes ${result.value.code()}")                    Log.d("TTT", "result successes ${result.value.body()}")                }                is Resource.Failure -> {                    Log.d("TTT", "result failure ${result.errorCode}")                    Log.d("TTT", "result failure ${result.errorBody}")                }                else -> {}            }        }    }}